import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { venueService } from '../../services/venueService';
import './VenuList.css';

// Add CSS for loading and error states
const styles = `
  .loading-state, .error-state, .no-venues-message {
    text-align: center;
    padding: 2rem;
    margin: 2rem 0;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .loading-state {
    color: #666;
  }

  .error-state {
    color: #dc3545;
  }

  .retry-btn, .clear-filters-btn {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    background: #0d6efd;
    color: white;
    cursor: pointer;
  }

  .retry-btn:hover, .clear-filters-btn:hover {
    background: #0b5ed7;
  }

  .no-venues-message {
    color: #666;
  }
`;

// Add styles to document
const styleSheet = document.createElement("style");
styleSheet.innerText = styles;
document.head.appendChild(styleSheet);

const VenuesList = () => {
  const navigate = useNavigate();
  const [venues, setVenues] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);
  const [filters, setFilters] = useState({
    search: '',
    sport: '',
    priceRange: [0, 5000],
    venueType: [],
    rating: 0
  });

  const fetchVenues = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await venueService.getAllVenues({
        page,
        ...filters,
        venueType: filters.venueType.join(',')
      });
      
      // Handle the Axios response structure
      const venuesData = response?.data || [];  // Changed to handle direct array response
      const venues = Array.isArray(venuesData) ? venuesData : [];
      setVenues(venues);
      
      // If we get an empty array when we should have venues, show an error
      if (venues.length === 0 && !filters.search && !filters.sport && filters.rating === 0) {
        setError('No venues found. Please try again later.');
      }
    } catch (err) {
      console.error('Error fetching venues:', err);
      setVenues([]);
      setError(err?.response?.data?.message || err.message || 'Failed to fetch venues');
    } finally {
      setLoading(false);
    }
  }, [filters, page]);

  // Fetch venues when component mounts or filters/page change
  useEffect(() => {
    const timer = setTimeout(() => {
      fetchVenues();
    }, 300); // Debounce API calls

    return () => clearTimeout(timer);
  }, [fetchVenues]);

  return (
    <div className="venues-list-layout">
      {/* Sidebar */}
      <aside className="venues-sidebar">
        <div className="sidebar-section">
          <label htmlFor="search-venue">Search by venue name</label>
          <input 
            id="search-venue" 
            type="text" 
            placeholder="Search for venue" 
            value={filters.search}
            onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
          />
        </div>
        <div className="sidebar-section">
          <label>Filter by sport type</label>
          <select 
            value={filters.sport}
            onChange={(e) => setFilters(prev => ({ ...prev, sport: e.target.value }))}
          >
            <option value="">All sports</option>
            <option value="badminton">Badminton</option>
            <option value="football">Football</option>
            <option value="cricket">Cricket</option>
            <option value="tennis">Tennis</option>
          </select>
        </div>
        <div className="sidebar-section">
          <label>Price range (per hour)</label>
          <input 
            type="range" 
            min="0" 
            max="5000" 
            value={filters.priceRange[1]}
            onChange={(e) => setFilters(prev => ({ 
              ...prev, 
              priceRange: [prev.priceRange[0], parseInt(e.target.value)] 
            }))}
          />
          <div className="price-range-labels">
            <span>‚Çπ {filters.priceRange[0]}</span>
            <span>‚Çπ {filters.priceRange[1]}</span>
          </div>
        </div>
        <div className="sidebar-section">
          <label>Choose Venue Type</label>
          <div>
            <input 
              type="checkbox" 
              id="indoor"
              checked={filters.venueType.includes('indoor')}
              onChange={(e) => {
                const newTypes = e.target.checked 
                  ? [...filters.venueType, 'indoor']
                  : filters.venueType.filter(t => t !== 'indoor');
                setFilters(prev => ({ ...prev, venueType: newTypes }));
              }}
            />
            <label htmlFor="indoor">Indoor</label>
          </div>
          <div>
            <input 
              type="checkbox" 
              id="outdoor"
              checked={filters.venueType.includes('outdoor')}
              onChange={(e) => {
                const newTypes = e.target.checked 
                  ? [...filters.venueType, 'outdoor']
                  : filters.venueType.filter(t => t !== 'outdoor');
                setFilters(prev => ({ ...prev, venueType: newTypes }));
              }}
            />
            <label htmlFor="outdoor">Outdoor</label>
          </div>
        </div>
        <div className="sidebar-section">
          <label>Minimum Rating</label>
          <select 
            value={filters.rating}
            onChange={(e) => setFilters(prev => ({ ...prev, rating: parseInt(e.target.value) }))}
          >
            <option value="0">All ratings</option>
            <option value="5">5 stars & up</option>
            <option value="4">4 stars & up</option>
            <option value="3">3 stars & up</option>
            <option value="2">2 stars & up</option>
            <option value="1">1 star & up</option>
          </select>
        </div>
        <button 
          className="clear-filters-btn"
          onClick={() => {
            setFilters({
              search: '',
              sport: '',
              priceRange: [0, 5000],
              venueType: [],
              rating: 0
            });
            setPage(1);
          }}
        >
          Clear Filters
        </button>
      </aside>

      {/* Main Content */}
      <main className="venues-main">
        <h2 className="venues-title">
          Sports Venues in Ahmedabad: Discover and Book Nearby Venues
        </h2>
        
        {loading && (
          <div className="loading-state">
            <div>Loading venues...</div>
          </div>
        )}
        
        {error && (
          <div className="error-state">
            <div>{error}</div>
            <button onClick={fetchVenues} className="retry-btn">Retry</button>
          </div>
        )}
        
        <div className="venues-grid">
          {Array.isArray(venues) && venues.length > 0 ? (
            venues.map((venue) => (
              <div key={venue._id} className="venue-card-outline">
                <div className="venue-image-placeholder">
                  {venue.images && venue.images.length > 0 ? (
                    <img src={venue.images[0]} alt={venue.name} />
                  ) : (
                    "No Image"
                  )}
                </div>
                <div className="venue-info-outline">
                  <div className="venue-header-row">
                    <span className="venue-name">{venue.name}</span>
                    <span className="venue-rating-outline">
                      ‚≠ê {venue.rating?.average || 'N/A'} 
                      <span className="venue-reviews">({venue.rating?.count || 0})</span>
                    </span>
                  </div>
                  <div className="venue-location-outline">üìç {venue.location}</div>
                  <div className="venue-price-outline">‚Çπ {venue.pricing?.basePrice || 0} per hour</div>
                  <div className="venue-amenities-outline">
                    {venue.sports?.map((sport, idx) => (
                      <span key={idx} className="venue-tag-outline">{sport}</span>
                    ))}
                    {venue.amenities?.map((amenity, idx) => (
                      <span key={`amenity-${idx}`} className="venue-tag-outline">{amenity}</span>
                    ))}
                  </div>
                  <button 
                    className="view-details-btn-outline" 
                    onClick={() => navigate(`/venue/${venue._id}`)}
                  >
                    View Details
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="no-venues-message">
              <p>No venues found matching your criteria.</p>
              <button onClick={() => {
                setFilters({
                  search: '',
                  sport: '',
                  priceRange: [0, 5000],
                  venueType: [],
                  rating: 0
                });
                setPage(1);
              }} className="clear-filters-btn">
                Clear Filters
              </button>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default VenuesList;
